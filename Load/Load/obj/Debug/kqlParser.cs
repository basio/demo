//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.4.1-SNAPSHOT
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\khalefa\Downloads\GraphX-PCL\Load\Load\kql.g4 by ANTLR 4.4.1-SNAPSHOT

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

namespace Load {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.4.1-SNAPSHOT")]
[System.CLSCompliant(false)]
public partial class kqlParser : Parser {
	public const int
		NUMBER=1, INT=2, MULTIPLY=3, DIVIDE=4, SUBTRACT=5, ADD=6, WS=7;
	public const int
		RULE_compileUnit = 0, RULE_expression = 1;
	public static readonly string[] ruleNames = {
		"compileUnit", "expression"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, "'*'", "'/'", "'-'", "'+'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "NUMBER", "INT", "MULTIPLY", "DIVIDE", "SUBTRACT", "ADD", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "kql.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public kqlParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class CompileUnitContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(kqlParser.Eof, 0); }
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public IReadOnlyList<ExpressionContext> expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public CompileUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compileUnit; } }
		public override void EnterRule(IParseTreeListener listener) {
			IkqlListener typedListener = listener as IkqlListener;
			if (typedListener != null) typedListener.EnterCompileUnit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IkqlListener typedListener = listener as IkqlListener;
			if (typedListener != null) typedListener.ExitCompileUnit(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IkqlVisitor<TResult> typedVisitor = visitor as IkqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompileUnit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompileUnitContext compileUnit() {
		CompileUnitContext _localctx = new CompileUnitContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_compileUnit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 4; expression(0);
				}
				}
				State = 7;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==NUMBER );
			State = 9; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class MultiplicationContext : ExpressionContext {
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode MULTIPLY() { return GetToken(kqlParser.MULTIPLY, 0); }
		public IReadOnlyList<ExpressionContext> expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public MultiplicationContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IkqlListener typedListener = listener as IkqlListener;
			if (typedListener != null) typedListener.EnterMultiplication(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IkqlListener typedListener = listener as IkqlListener;
			if (typedListener != null) typedListener.ExitMultiplication(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IkqlVisitor<TResult> typedVisitor = visitor as IkqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplication(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AdditionContext : ExpressionContext {
		public ITerminalNode ADD() { return GetToken(kqlParser.ADD, 0); }
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public IReadOnlyList<ExpressionContext> expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public AdditionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IkqlListener typedListener = listener as IkqlListener;
			if (typedListener != null) typedListener.EnterAddition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IkqlListener typedListener = listener as IkqlListener;
			if (typedListener != null) typedListener.ExitAddition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IkqlVisitor<TResult> typedVisitor = visitor as IkqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddition(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SubtractionContext : ExpressionContext {
		public ITerminalNode SUBTRACT() { return GetToken(kqlParser.SUBTRACT, 0); }
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public IReadOnlyList<ExpressionContext> expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public SubtractionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IkqlListener typedListener = listener as IkqlListener;
			if (typedListener != null) typedListener.EnterSubtraction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IkqlListener typedListener = listener as IkqlListener;
			if (typedListener != null) typedListener.ExitSubtraction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IkqlVisitor<TResult> typedVisitor = visitor as IkqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubtraction(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NumberContext : ExpressionContext {
		public ITerminalNode NUMBER() { return GetToken(kqlParser.NUMBER, 0); }
		public NumberContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IkqlListener typedListener = listener as IkqlListener;
			if (typedListener != null) typedListener.EnterNumber(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IkqlListener typedListener = listener as IkqlListener;
			if (typedListener != null) typedListener.ExitNumber(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IkqlVisitor<TResult> typedVisitor = visitor as IkqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumber(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DivisionContext : ExpressionContext {
		public ITerminalNode DIVIDE() { return GetToken(kqlParser.DIVIDE, 0); }
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public IReadOnlyList<ExpressionContext> expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public DivisionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IkqlListener typedListener = listener as IkqlListener;
			if (typedListener != null) typedListener.EnterDivision(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IkqlListener typedListener = listener as IkqlListener;
			if (typedListener != null) typedListener.ExitDivision(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IkqlVisitor<TResult> typedVisitor = visitor as IkqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDivision(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(_ctx, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 2;
		EnterRecursionRule(_localctx, 2, RULE_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new NumberContext(_localctx);
			_ctx = _localctx;
			_prevctx = _localctx;

			State = 12; Match(NUMBER);
			}
			_ctx.stop = _input.Lt(-1);
			State = 28;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,2,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 26;
					switch ( Interpreter.AdaptivePredict(_input,1,_ctx) ) {
					case 1:
						{
						_localctx = new MultiplicationContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 14;
						if (!(Precpred(_ctx, 5))) throw new FailedPredicateException(this, "Precpred(_ctx, 5)");
						State = 15; Match(MULTIPLY);
						State = 16; expression(6);
						}
						break;

					case 2:
						{
						_localctx = new DivisionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 17;
						if (!(Precpred(_ctx, 4))) throw new FailedPredicateException(this, "Precpred(_ctx, 4)");
						State = 18; Match(DIVIDE);
						State = 19; expression(5);
						}
						break;

					case 3:
						{
						_localctx = new AdditionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 20;
						if (!(Precpred(_ctx, 3))) throw new FailedPredicateException(this, "Precpred(_ctx, 3)");
						State = 21; Match(ADD);
						State = 22; expression(4);
						}
						break;

					case 4:
						{
						_localctx = new SubtractionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 23;
						if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
						State = 24; Match(SUBTRACT);
						State = 25; expression(3);
						}
						break;
					}
					} 
				}
				State = 30;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,2,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 1: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(_ctx, 5);

		case 1: return Precpred(_ctx, 4);

		case 2: return Precpred(_ctx, 3);

		case 3: return Precpred(_ctx, 2);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\t\"\x4\x2\t\x2"+
		"\x4\x3\t\x3\x3\x2\x6\x2\b\n\x2\r\x2\xE\x2\t\x3\x2\x3\x2\x3\x3\x3\x3\x3"+
		"\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3"+
		"\x3\x3\a\x3\x1D\n\x3\f\x3\xE\x3 \v\x3\x3\x3\x2\x2\x3\x4\x4\x2\x2\x4\x2"+
		"\x2\x2$\x2\a\x3\x2\x2\x2\x4\r\x3\x2\x2\x2\x6\b\x5\x4\x3\x2\a\x6\x3\x2"+
		"\x2\x2\b\t\x3\x2\x2\x2\t\a\x3\x2\x2\x2\t\n\x3\x2\x2\x2\n\v\x3\x2\x2\x2"+
		"\v\f\a\x2\x2\x3\f\x3\x3\x2\x2\x2\r\xE\b\x3\x1\x2\xE\xF\a\x3\x2\x2\xF\x1E"+
		"\x3\x2\x2\x2\x10\x11\f\a\x2\x2\x11\x12\a\x5\x2\x2\x12\x1D\x5\x4\x3\b\x13"+
		"\x14\f\x6\x2\x2\x14\x15\a\x6\x2\x2\x15\x1D\x5\x4\x3\a\x16\x17\f\x5\x2"+
		"\x2\x17\x18\a\b\x2\x2\x18\x1D\x5\x4\x3\x6\x19\x1A\f\x4\x2\x2\x1A\x1B\a"+
		"\a\x2\x2\x1B\x1D\x5\x4\x3\x5\x1C\x10\x3\x2\x2\x2\x1C\x13\x3\x2\x2\x2\x1C"+
		"\x16\x3\x2\x2\x2\x1C\x19\x3\x2\x2\x2\x1D \x3\x2\x2\x2\x1E\x1C\x3\x2\x2"+
		"\x2\x1E\x1F\x3\x2\x2\x2\x1F\x5\x3\x2\x2\x2 \x1E\x3\x2\x2\x2\x5\t\x1C\x1E";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace Load
